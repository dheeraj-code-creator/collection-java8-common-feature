Introduction:

Hi I am Dheeraj Kumar.
I have 10 years of IT experience working on Java, Microservices, and AWS.
I have worked on many domains like (telecom, Backup&storage, Retails&Logistics, Banking and Automobile.)
My current company is LTIMindtree and I am woring with client Adidas.
there my role was:
creation of Microservices.
creation of AWS lambda.
integration of various AWS services.
migration of Legacy application on cloud.

1) HashMap implementation                             (Complete)
2) Difference between Iterator and Enumerator         (Complete)
5) Thread Max priority				                  (Complete)
   Max: 10, Min: 1, Default: 5
6) Anonymous class, Local inner class, static nested class in java 			      (Complete)
7) Comparable and comparator
10) Exception Handling  (Complete)
12) Difference between Arraylist and LinkedList?
13) Design pattern (Factory DP, Singelton DP, Builder DP, Prototype DP)
14) Java 8 and 17 new features

java 8:

Predicate
Consumer
Function
Stream
Foreach
Optional
TryWithResource

java 17:

Switch Pattern Matching
Ex: switch (day) {
              case 1 -> System.out.println("Monday");   // If day equals 1, print "Monday"
              case 2 -> System.out.println("Tuesday");  // If day equals 2, print "Tuesday"
              default -> System.out.println("Invalid day");
            }

Sealed classes
Ex: public sealed class A permits B, C{

    }

Record classes
Ex: public Record A (id, name){

    }

Text Blocks
Ex: public String getBlockOfHtml() {
       return """
            <html>
                <body>
                    <span>example text</span>
                </body>
            </html>
            """;
    }

15) Microservices Design pattern
1. Api Gateway (Zuul or AWS API Gateway)     : entry point of all the Microservices.
2. Asynchronous messaging (Kafka or AWS SQS) : Acts as broker where producer produce the msg and receiver recieve the msg.
3. Fault tolerance (Circuit breaker)         : Hystrix
4. Versioning                                : Allows different version to test the api in diff env: test, prod
5. Aggregator                                : Combines all response to the single one and provides to the client.
6. Decomposition                             : Breaks monolithic application to module based application.
7. Service registry and locator              : Eureka
8. 1 Db per service

16) Microservice Orchestration and Choreography?
                  OR
          Transaction Rollback
Orchestration: One service will manage other services.
                 Ex: Kubernetes (on-premises)
                     ECS (Fargate/EC2 cloud)
Choreography : event driven services, all microservice will managed based on the event.
                 Ex: Kafka



Difference between Iterator and Enumerator
iterator: having both methods next() and remove.
          We can change the existing collection while doing remove() method
          if iterator will change the collection then its fine, if collection itselfs change the data
              while doing iteration then will get ConcurrentModificationException.
          Iterator is advance version of enumerator.

Enumerator: Doesn't have remove() method.


Exception handling:
Example:

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(value = NullPointerException.class)
    public ResponseEntity<ErrorResponse> handleMyCustomException(MyCustomException ex) {
        ErrorResponse errorResponse = new ErrorResponse(ex.getMessage());
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

}


################################################################################################

Dynamo DB:
1) It's a No-sql database.
2) Data store as a key-value pair.
3) Scalable based on the huge amount of data.
4) No hardware porvisioning is required.

Challenges on Migration of legacy services on cloud:
1) Data storage
In legacy application we have used oracle or sql database, so here we have to take care of the hardware provisioning based on
amount of the data. bcz these database are not scalable.
But On cloud no need to think about the hardware or infrastructure thing, also cloud services are scalable based on the amount
of data. here we have migrated from SQL database to Dynamo DB.

2) Cost optimization
In Legacy application every time our instaces/nodes are running, it doesnot depends on the traffic, so the cost is high bcz
many instances are running.
But on cloud here we have scalable services which will increase/decrease the instances based on the traffic. so cost is less.
here we have used Load balancer (Application load balancer).
 
3) Monitoring higher env
Initially we have to open each services logs and we have to check which services is having a issue,
but after Grafana monitoring tool its too easy to monitor each and every services.

Database:

1)   what is join?
Ans: join means, it will join two or more tables based on the matching columns and create a resultant output table.
     there are two types of Joins:	
	Inner join
	outer join

	inner join: it will join two table's based on the matching data of the column and create new resultant table.
	outer join: we have two types of outer join.
		left outer join
		right outer join
	
		left outer join: it will collect all data from left side(first table) if data not matched with right side(second table) it will assign null values.
		right outer join: it will collect all data from right side(second table) if data not matched with left side(first table) it will assign null values.



2) what is indexing?
Ans: Indexing is just like to provide speed up to database engine to retrieve data from the database based on the column, its just like a reference pointer for 
     example (in book we have a reference index on first page. ) it speed-up the process for where and select clause, but its slow down for insert and update statement
     syntax: Create index index_name on table_name(column_name);
     type of index:
     1. unique index (only one column)
         CREATE UNIQUE INDEX index_name on table_name (column_name);
     2. composite index (multiple column)
         CREATE INDEX index_name on table_name (column1, column2);
     3. implicite index (automaticaly created by the database server when object is created)
     4. Drop index (An index can be dropped using SQL DROP command. Care should be taken when dropping an index because performance may be slowed or improved)
        DROP INDEX index_name;

3) what is Casceding?
Ans: Which means that when a Parent row is deleted (killed), no orphan row should stay alive in the Child table. 
     All children of the parent row are killed (deleted), too. If any of these children has grandchildren (in another table through another foreign key) 
	 and there is ON DELETE CASCADE defined, these should be killed, too (and all descendants, as long as there is a cascade effect defined.

4) Difference between Primary key and Unique key and Foreign key?
    Primary key:
	1. cannot contains null values.
	2. primary key is related with another table as a foreign key.
    Unique key:
	1. contains null values.
	2. unique key is not related with another table as a foreign key.
    Foreign key:
	1. accepts more than one null values.
	2. we can have one or more than one foreign key in a table.	
	
5) Difference between Drop,Truncate and Delete
Ans: Drop: deletes the whole table along with schema, once done it cannot rollback.
     Truncate: deletes the data of the table.
	 Delete: deletes a particular record.

6) can we serialize singleton class and it's instance?
Ans: If singleton class is Serializable, you can serialize the singleton instance. Once it is serialized, 
you can deserialize it but it will not return the singleton object.
To resolve this issue, you need to override the readResolve() method that enforces the singleton. 
It is called just after the object is deserialized. It returns the singleton object.

8) What is serialization and deserialization? where it can be used? can we serialize static data member and function? can subclass is also
   serialized if parent is serialized? how can we make a class is serializable? while deserialization of class does serializable interface
   need to be implements?
Ans: conversion of object to a stream/flat file i.e serialization.
     conversion of flat file/stream to a object i.e deserialization.
     it is used in some messaging services (JMS, Kafka, or stored a file in DB for later usages)
     No we cannot serialize static data member and member function, bcz static is class level variable not object level.
     yes, if parent is serialized subclass also serialized.
     we need to implements serializable interface.
     No, while deserialization no need to implements serializable interface.

7) what is wrapper classes/ what is boxing and unboxing?
Ans: conversion of primitive datatype to wrapper class i.e boxing.
     conversion of wrapper class to primitive datatype i.e unboxing.
     After jav 1.5 it provides automatically conversion mechanism.
	  
13) when you are going to use Arraylist and when LinkedList?
Ans: LinkedList- Storing and deleting of data. internally usess doubly linked list
     ArrayList- searching of data. internally usess dynamic array
	  
15) Can we have constructor in Abstract class?
Ans: Yes

what is the use of constructors in abstract class, if we cannot create the object of abstract class?
  Constructor is used for initialization, once subclass will extends the abstract class, and will create
  the object of subclass on that time it will call parent class constructor with the help of super();
  
  public abstract class LowesExample1 {
	
	private int x;
	private int y;
	
	public LowesExample1(int x, int y) {
		this.x =x;
		this.y =y;
	}
	
	public abstract void display();
	
	public void show() {
		System.out.println("non abstract method");
	}

}

public class LowesExample2 extends LowesExample1{
	
	public LowesExample2(int x, int y) {
		super(x, y);
		System.out.println(x+y);
	}

	public static void main(String[] args) {
		LowesExample1 lowesExample2 = new LowesExample2(1,3);
		lowesExample2.display();
		lowesExample2.show();
	}

	@Override
	public void display() {
		System.out.println("abstract implemented methods");
	}

}

output: 4
   

16) Can we create an Abstract class without any abstract method?
Ans: Yes

Q. String str = new String("Hello") how many objects will be created?
Ans: 2 objects (1 in heap and 1 in string constant pool)

Q. What is functional interface
Ans: A interface which is having only one abstract method is called functional interface.

Q. how many default and static method we can create in functional interface?
Ans: 1 or more than 1

Q. What is the use of default method in functional interfaces in java 8?
   for Backtracking
   Before Java 8, interfaces could have only abstract methods. The implementation of these methods has to be provided in a separate class.
   So, if a new method is to be added in an interface, then its implementation code has to be provided in the class implementing the same interface.
   To overcome this issue, Java 8 has introduced the concept of default methods which allow the interfaces to have methods
   with implementation without affecting the classes that implement the interface.

Q. Can we override default methods? and how
Ans Its not mandatory but Yes we can override
    we can call that method with the help of super.
	interfacename.super.interfacemethodname

	If we are using Only one interface in a Program then at a time we are using only a single default method and at
	that time Overriding is not required.

	But when more than two Interfaces are used and both act as parent class then at that time Overriding of the Default
	Method is required. If we are using more than one interface and in both interfaces,
	if both interfaces have the same name and same structure. So at that time,
	one must override either one both the default method otherwise it will result in an error.
	
Q. what is the use of functional interface/ lambda expression
Ans: to pass a block of code to methods or objects. performing actions.
     

Q. How to create immutable class in java?
Ans: Make class as final
     make instanceVariable/datamembers as final
	 initialize instance variable inside constructor.
	 donot create setters only create getters.
	 
  public final class Employee{  
	final String pancardNumber;  
  
	public Employee(String pancardNumber){  
	this.pancardNumber=pancardNumber;  
	}   
	public String getPancardNumber(){  
	return pancardNumber;  
	}   
} 

Q. when will you go for interface and abstract?
Ans: based on requiremts:
     if you want to only extends one class go for Abstract. 
	 (A Class can only extends 1 class and implements many interfaces)
	 if you want to implements more than one interface go for interface.
	 (Interface extends many interfaces.)
	 
Q. Contract of hashcode
Ans: 1) If two objects are equal, then they must have the same hash code. 
     2) If two objects have the same hash code, they may or may not be equal. 

17) what is difference between concurrent HashMap and HashTable?
Ans: both are thread safe, but main difference is:
     HashTable: make lock for all the Objects.
	 ConcurrentHashMap:it will divide the code in different segments, and then make the lock for few objects.

21) What is Collision
    Collision means two object have the same hashcode, and both the key wil try to store in the
	same bucket.
	Resolution: Collision chaining, use equals method.
	 
18)	 Aggregation :
	 has-a relationship
	 entities are not dependent to each other.
	 A Institute can have many students, but viceversa is not possible.
	 
	 Composition:
	 has-a relationship
	 entities are dependent to each other.
	 Vehicle has a engine.
	 
19) Fault tolerance
    Ex: explain Hystrix

    Add the Hystrix dependency in pom.xml
    At the top of the class add
    @EnableCircuitBreaker on Class
    @HystrixCommand on method. It takes a parameter  fallbackMethod which is the name of the method to which the request will be redirected

    @RestController
    @SpringBootApplication
    @EnableCircuitBreaker
    public class SimpleClientApplication {
      @GetMapping
      @HystrixCommand(fallbackMethod = "defaultProductList")
      public String cloudProductList() {
        RestTemplate restTemplate = new RestTemplate();
        URI uri = URI.create("http://localhost:8090/products");

        return restTemplate.getForObject(uri, String.class);
      }
    public List<String> defaultProductList() {
        return Arrays.asList("spring cloud");
      }
	
20) Which Collection maintains insertion order and doesn't allow duplicates
	LinkedHashSet

	
22) Different Bean scopes in spring
	Singleton
	Prototype
	Session
	Request
	Global Session
	
23) Autowiring modes
	ByName
	ByType
	ByContructor
	No
	
*)Difference between @Configuration and @Component
  @Configuration: Used to declare multiple beans, so that spring-context will know this is the class where all the beans are
                declared.
  @Component:     Used for class-path scanning, auto-detection of the packages and classes.

*)What is the use of @Qualifier annotation
  @Qualifier:     It resolves the conflict of similar bean definition.

*)Connection between two datasource in springboot
  application.properties
#first db
spring.datasource.url = [url]
spring.datasource.username = [username]
spring.datasource.password = [password]
spring.datasource.driverClassName = oracle.jdbc.OracleDriver

#second db ...
spring.secondDatasource.url = [url]
spring.secondDatasource.username = [username]
spring.secondDatasource.password = [password]
spring.secondDatasource.driverClassName = oracle.jdbc.OracleDriver

  create two datasources
@Bean
@Primary
@ConfigurationProperties(prefix="spring.datasource")
public DataSource primaryDataSource() {
    return DataSourceBuilder.create().build();
}

@Bean
@ConfigurationProperties(prefix="spring.secondDatasource")
public DataSource secondaryDataSource() {
    return DataSourceBuilder.create().build();
}	

    When you want to use any of the database use @Qualifier
@Qualifier("spring.secondDatasource")
	
24) What all are 12 Factor of Microservices
	Codebase: ex use version control for microservices
	dependency
	build, release, run
	config
	port binding
	logs
	monitoring
	Concurrency
	Disposability
	Backing services
	process
	dev/prod integration

25) Functional vs Non functional requierements
                   OR
    Behavioural vs Non Behavioural requierements	
    Functional: what the System should do, what will be input and what the service will provide the output.
    Non-Functional: How the System Work.
                    Performance
				    Security
					Scalibility
					Maintainbility
					portablity
					
26) What are the Transaction propagation provided by spring boot?
Ans: Required
	 Requires_New
	 Supports
	 Not_supported
	 Never
	 Mandatory
	  syntax: @Transactional(propagation = Propogation.Required)
	 
27) What are the transaction isolation provided by spring boot?
Ans: Read_Committed
	 Read_Uncommitted
	 Repeatable_read
	 Serializable
	  syntax: @Transactional(isolation = Isolation.Read_Committed)
	  
28) Difference between Put and Patch?
Ans: POST: Create new resource
     Put:  Update existing resource if present otherwise create new resource
     Patch: replace the particular filed
	 
29) what is stream?
    Stream provides a pipeline where we can perform different operations. Stream doesnot modify actual source,
    whenever we perform any operation it will return a new stream of data.

30) Diff between stream and parallel stream?	
    Stream perform sequentially, single thread will process the opertion.
	Parallel Stream perform parallely, multiple thread will process the operation.

1) Difference between @pathVariable and @pathParam
@pathVariable: extracts the variable from URL.
Ex:
http://localhost:8080/users/101
@GetMapping("/user/{userId}")
public String getUserById(@PathVariable("userId") String userId) {
}

@pathParam: Passing parameter to URL.
Ex:
http://localhost:8080/users?userId=101
@GetMapping("/user")
public String getUserById(@PathParam("userId") String userId) {
}

2) Difference between @Controller and @RestController
Ans: @Controller: used in spring MVC controller, here we have to use @ResponseBody annotation as well.

     @Controller
     public class MyController {

        @ResponseBody
        @GetMapping("/hello")
        public String helloWorld(){
              return "Hello World!";
        }
	 }

     @RestController: combination of both @Controller and @ResponseBody annotation.

     @RestController
     public class MyRestController {

        @GetMapping("/hello")
        public String helloWorld(){
               return "Hello World!";
        }
	 }

Exception:
NoSuchBeanDefinitionException: No qualifying bean of type
solution:
You might need to add the following to the main app class:
@ComponentScan(basePackages = "Package where the repository is located”)

Looks like your repository is in a different package and spring context is not able to pick it up when starting up.
@ComponentScan(basePackages = "ilogstc.gis.usermgmt.reader")
					
==============================================================================================================


                Cloud
         ===========================================
1) What is cloud?
   On demand services over the internet is called cloud. and managing those services/resources is called computing.

2) what are the types of Cloud
   Deployment model: Public cloud -> Access for all (Gmail)
					 Private cloud -> only for private networks of the organization (Outlook).
					 Hybrid cloud -> combination of both  (internet cafe)

	Service model:   IAAS: Netork managed/ EC2 instance managed, used by IT administrator.. (EC2)
	                 PAAS: Amazon web services, used by software developers.. (S3, SNS, SQS, Dynamo DB)
					 SAAS: Gmail, Goodle drive, directly used by everyone.

3) differnece between cloud computing and on premises? advantages and disadvantages?
   On premises:- Physical server or softwares which is located/installed inside the organization.
                 Ex: unix/linux box, windows etc..

   Cloud computing: Virtual servers or software services provided by third party/vendor through web application.
                 Ex: Gmail, Google drive, (no need to install directly run on browser)
================================================================
				
				AWS: S3
			===========
1) what are the stoarage classes in S3?
   S3 Standard
   S3 one zone
   S3 Intelligent tiering
   Amazon Glacier
   Amazon Glacier Deep archiving.
   
2) what is frequent and Infrequent data access?
   Frequent: daily basis
   Infrequent: once in a month
   
3) what is versioning in S3?
   Versioning means keeping multiple variants of single object in the same bucket.
   we can use versioning to preserve, retrieve, and restore every version of every object stored in your Amazon S3 bucket.
   With versioning, you can easily recover from both unintended user actions and application failures.
   
4) what is object lock in S3?
   Create a new bucket with Object Lock enabled.
   
5) what is ACL (Access Control List)
   Grant basic read/write permissions to other AWS accounts.
   
6) what is CORS (Cross Origin Resource Sharing)
   It usess in client web applications where resources from one domain will interact with the resources in a different domain.
   
                  AWS Lambda
				=============================  
1) what is AWS lambda and serverless?
   AWS lambda: its a compute service, an event driven serverless computing platform provided by AWS.
   Serverless: Pay for use
               No need to worry about the servers.
			   
2) what is horizontal and vertical scalling in AWS lambda?
   Horizontal: increase the number of instances.
   vertical: increase the memory.

3) Max exection time in lambda
   15 min.

4) how bill will be generate for lambda function?
   based on how much memory used and the time duration for the execution.

5) how versioning and Alias works in aws lambda?
   Versioning:
   1) create a function and test it, if everything is ok then will go for publish.
   2) once we go for publish, our code is immutable we can't edit now, and lambda will create a new version 1.
   3) now we have added more code in the $latest version and again if we go for publish it will create new version 2.
   everytime when we publish our function new version will create.

   Alias:
   alias is used for the deployment.
   ex: Dev is pointing to version 1
       Prod is pointing to version 2
       through Alias we can also do blue green deployment 50% traffic is going to version 1 and 50% to version 2
 
6) Bydefault Concurrency/unreserved concurrency limit : 1000 (we can change it with AWS support team)
             reserved concurrency limit : anything below 1000
   provisioned concurrency (before invoking the lambda code is loaded and container is ready to run) more costly
 
7) what is cold and warm start in AWS Lambda?
   cold start: time between invoking of lambda and running of lambda.
               lambda lifecycle: invoke->micro container created->loading lambda code->running lambda
   warm start: provisioned concurrency (before invoking the lambda, code is loaded and container is ready to run)

8) What is Lambda Layer?
   Lambda layer is a .zip archive file which is having information of external libraries and dependencies.
   it is used to reduce the lambda packaging size.
   we can attach maximum 5 layers to lambda function.
   Multiple lambda function can use the same layer.

latency
	Measures the time delay when sending data from source to destination.
throughput
	Volume of data, how much data/request user can transmit in a period of time.
	1000 req/sec
thresholds
	Maximum limit, after a particular range/load/time the alarm will generate
throttled
	Number of request exceeds the limit.
	req>1000
replica
    Object/Instances

   

      

                    AWS API Gateway
                =====================================
1) What is Api gateway?
   used for creating, monitoring, and publishing API's.		

2) what are the type of API we can create?
   Http api (CORS support) works based on protocols, some rules are defined based on that it will work.
   Rest api (complete control over the req and response) architecutral style.
   Rest api private (accessable only with in a VPC)
   websocket api (real time use application such as: chatbox, or dashboards) 

3) steps to create Api
   create api->choose api types->create resource->create method(put,post,get etc)->integrate with(lambda, vpc, etc)->deploy api
   then will get url to invoke.


                      Redis
                ===============================================
1) what is Redis (Remote dictionary server)
   Redis is an open source, fast, inmemory, key-value data store.		

                      SNS and SQS
               ================================================
1) Diff SNS and SQS
SNS is a Pub/Sub message service.
It push messages to all the subscribers.
SNS does not persist the messages, its delievers to the subscriber and delete the message.
When to use: For Christmas Eve send the offer details to all the subscribers.

SQS is a distributed message service.
It works on Pull mechanism, Reciever has to pull the messages one by one. at a time only one consumer.
SQS persist the messages, 
When to use: For a batch job, after each jobs completion messages are stored to the SQS and backend-services pull the messages 
             one by one.
Max polling/wait time is 20 Seconds.
Default hold time for a single message in SQS = 4 days, we can make it to 14 days also.

                       Step Functions
		       ================================================
Step functions manages/orchestrate multiple AWS services to complete the task.
It provides the visual workflow editor where output of one service is the input of another service.
If any one of the service got failed, then its having a automatic retry, triggering and tracking capabilities. 	

                       Reactive Programing
               ================================================
Reactive programing means Asynchronous and Non-blocking process.
For ex: users sends a request that goes to the database, fetch some results and provide the results to the users.
        But whenever User-1 sends a request in background Thread-1 will be called and sends the request to DB.
            again    User-2 sends a request in background Thread-2 will be called and sends the request to DB.		
            again    User-3 sends a request in background Thread-3 will be called and sends the request to DB. 
	   like that all Threads are busy with the database. and the max Thread pool size is 20.
		Now suppose  User-21 sends a request then the request will be failed bcz all Threads are busy and max size is 20.
		So, to solve this type of situation Reactive programing occurs.
		      here   User-1 sends a request in background Thread-1 will be called and it will not wait for DB response,
			         it will tell DB just send a event once your process is done. and Thread-1 is ready to take another
					 User request.

				 


#############################################################
Advantages/benefits of Microservices
1. light weight/loosely coupled, (It breaks monolithic application to module/service based. ex: shopping application)
2. Deployment is easy bcz of light weight.
3. No need to use external server springboot provides internal tomcat server for running microservices.
4. Scalibility is easy. (microservices which is having more load will scale those only)
5. Easy to test due to less dependency

Disadvantages of Microservices
1. Difficult to maintain if we have 1000 or 10000 of microservices.
2. Higher chance of communication failure.

#############################################################
Microservices versioning

There are two ways to version microservices
1. URI versioning (Ex: https://hostname:8080/v1/inventory)
2. MediaType versioning (Ex: application/v1+json)

#############################################################
How to mock static methods, fields, constructors and final class, methods
Powermock
@RunWith(PowerMockRunner.class)
PowerMockito.mockStatic() method


#############################################################
How to handle/increase the performance of the application?

1. Use containerization (Ex: Docker)
2. Use single database per application (Any DB)
3. Do proper scalling based on the traffic. (Kubernetes, any load balancer)
4. Use any Cache mechanism (Redis, inMemory cache) reduce number of calls to DB.

#############################################################
How you manage/provide security to the Application

1. Use APIGateway with Lambda Authorizer
2. Use OAUTH2
3. Use Amazon Cognito user pool

Use APIGateway with Lambda Authorizer
Authentication:
1. User sends request to APIgateway with userId and password
2. APIgateway will call Authentication service. (Authentication service is either your Lambda or Microservice)
3. Authentication service will validate username and password in DB (Dynamo DB, SQL db etc..)
4. Once user is validated Authentication service will create a access token and same as attached to the request.

Authorization:
5. APIgateway will receive the access token and sends the request to Lambda authorizer.
6. Lambda authorizer will check what all permission/scope is allowed to the user. (It will check the permission and scopes to DB)
7. Lambda authorizer will generate a IAM policy with allow and denied permission and send back to APIgateway.
8. APIgateway will check the permission and based on that it will allow the user to use AWS services.

Use OAUTH2
1. lets suppose user wants to login online shopping website.
2. once shopping home page will come it will ask for username password or signup with third party.(Google, facebbok etc)
3. If user will try to login with third party then OAUTH server will be called and sends request to Google.
4. Google will validate the request and send back response to OAUTH server with access token.
5. OAuth server will put this access token to the request header and going forward all the user request will be
   match with the access token.

Use Amazon Cognito user pool
1. create a User pool, add the user there.
2. once user sends the request check the user pool and validate the user id and secrets.
3. once user is validated Amazon cognito will create a id, access and refresh token.
4. Amazon cognito will send the request with id token to APIgateway.
5. APIgateway will use this information and based on the access it will allow user to use AWS resources.

#############################################################

Distributed means: working with different machines/servers.
Apache Kafka

Kafka is a messaging system, its a distributed event driven real time event processing system.
Once producer sends messages to Kafka, messages will be there until consumer will consume the messages. messages will not lost.
To send/consume the messages we have to use the Topic.

Kafka Cluster (bunch of broker/ bunch of servers)
    Broker (one or more than one we can also say nodes/instances.)
      Topic (one or more than one topic)
        Partitions (one or more than one partition)
            offset (number or position of the messages)

we have to create the topic and partitions through kafka template command
Offset means: offset[0] position of the message inside the partitions, lets suppose there are 5 messages and after 3 messages
              consumer goes down, after some time consumer will up then how consumer will know from where to start the consuming the
              messages again. here offset will work.
replica : number of broker/node/instances

Zookeeper work:
1. managing kafka cluster
2. Load balance between partition
3. Keeping the records how many messages got consumed by the consumer with the help of Offset.

steps:
1. start zookeeper
2. start kafka server
3. create topics and partitions.

Provides all information to application.properties file

##############################################################

Docker:

Docker is a container which does packaging, building, and run the application anywhere.
It takes care of the application dependencies.

extension: dockerfile or docker-compose both are .txt file

FROM registry.tools.3stripes.net/base-images/ubuntu_java-11
ADD ./target/*.jar  /app/gis-datatransformation-operations.jar
EXPOSE 7708
CMD  java -jar -Dspring.profiles.active=$EXEC_ENVIRONMENT /app/gis-datatransformation-operations.jar

How you manage the different env in docker?
I have created different dockerfile for diff environments.
Ex:
Dockerfile-dev
Dockerfile-stage
Dockerfile-prod

Docker-compose-dev up -d
Docker-compose-prod up -d


#############################################################
Kubernetes:

Kubernetes is a cluster/server which provides a physical/virtual cluster where multiple containers
runs with a different/same images.
 its having master -> node structure.
master will distribute and manage the load from all the nodes.

Service object: used to manage/monitor the performance.
Deployment object: used for the deployment
POD object: used to run a container

Replica means: creation of POD objects

Kubernetes Cluster (bunch of servers)
		      nodes (one or more than one we can also say instances.)
			      namespace (ex: service.dev.adidas.com)
				      Deployment
				         POD
				           container

extension: k8sDeployment.yml

How you manage the different env in k8s?
Created only one file k8s.yaml
with the help of namespace distributed the env.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}
spec:
  replicas: ${REPLICAS}
  strategy:
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  # must have in new version and immutable after deployment completion;
  selector:
    matchLabels:
      app: ${APP_NAME}
  template:
    metadata:
      labels:
        app: ${APP_NAME}
    spec:
      containers:
      - name: ${APP_NAME}
        image: ${TAG_NAME}
        imagePullPolicy: Always
        resources:
           limits:
            cpu: ${RESOURCES_LIMITS_CPU}
            memory: ${RESOURCES_LIMITS_MEMORY}
           requests:
            cpu: ${RESOURCES_REQUESTS_CPU}
            memory: ${RESOURCES_REQUESTS_MEMORY}
        ports:
        - name: service-port
          containerPort: 7708
        # liveness probe allows to restart the container in case application goes to failure mode and stops responding
        livenessProbe:
          httpGet:
            path: /actuator/health # health endpoint is automatically provided by Spring Actuator
            port: service-port
          initialDelaySeconds: 200
          periodSeconds: 10
          failureThreshold: 30
          successThreshold: 1
          timeoutSeconds: 15
        env:
          - name: EXEC_ENVIRONMENT
            value: ${PROFILE_SELECTION}
      imagePullSecrets:
        - name: ${SECRET_KEY}
---

##############################################################
Difference between Docker and K8s?
When to use Docker and when to use K8s?

When you have very small application which requires only one container go for the Docker.
When you have large application for example there are 100 microservices each is deployed to 1 docker container. that means
total 100 docker container is running, then who will manage this 100 containers. for this type of scenario will go for Kubernetes.
Kubernetes provides the facility of master and nodes. it also manages the loads for each containers.

###############################################################

##############################################################
Terraform:

Terraform provides functionality to implement infrastructure as a code, where we can create resources and services on AWS.
It supports different types of cloud providers ex: AWS, Azure, GCP etc..
extension is .tf file
In terraform mainly we have 3 blocks
 1. Terraform block
 2. Provider block
 3. Resource block

 Example of .tf file
 terraform {
   required_providers {
     aws = {
       source  = "hashicorp/aws"
       version = "~> 4.16"
     }
   }

   required_version = ">= 1.2.0"
 }

 provider "aws" {
   profile = "default"
   region  = "us-west-2"
 }

 resource "aws_instance" "app_server" {
   ami           = "ami-830c94e3"
   instance_type = "t2.micro"

   tags = {
     Name = "ExampleAppServerInstance"
   }
 }

 Terraform lifecycle:
 1. init
 2. plan
 3. validate
 4. apply
 5. destroy

 steps to install terraform
 1. download binary file from Hashicorp
 2. extract to the local folder.
 3. set the terraform folder path to environment variable.

####################################################################################
             manually/through console
Steps to deploy microservices with the help of Docker and Kubernetes?
1. create microservice
2. create dockerfile
3. create k8s.yaml file
4. build your microservice
   .jar is ready to /target folder
5. build your dockerfile for creation of docker image (docker build -t your-id/jar-name .)
   a. it will download the jdk8 library.
   b. copy .jar file from /target folder to current directory .
   c. build the image file.
6. push image file to docker hub.
7. for deployment we already have k8s.yaml file, use kubectl command and deploy the application.
   kubectl apply -f k8s.yaml file name
   to check the deployment use below command
   kubectl get deployment
   To get the URL for the microservice use below command
   minikube service application-name
       (https://192.82.78/xyz)
------------------------------------------------------------------------------------------------
             manually/through console
Steps to deploy microservices with the help of Docker and ECS?
1. create microservice
2. create dockerfile
4. build your microservice
   .jar is ready to /target folder
5. build your dockerfile for creation of docker image (docker build -t your-id/jar-name .)
   a. it will download the jdk8 library.
   b. copy .jar file from /target folder to current directory .
   c. build the image file.
6. push image file to docker hub/ECR.
7. Login to AWS goto ECS
8. select task definition (Fargate or EC2) select any one based on the budget.
9. Add the container and provide the docker image details. (it will download the image from docker hub or ECR)
10. Create a cluster to run above task.
11. Once task is running successfully on cluster we will get a public ip to hit on browser.

------------------------------------------------------------------------------------------------
              with Jenkins console
1. commit and push the code to any repository version control tool (Github, Bitbucket etc..)
2. install the jenkins to your machine (local, dev, prod etc)
3. integrate your repository with jenkins.
    1. open jenkins and create job.
    2. provide the repository url in configuration
    3. provide the credentials.
    4. provide the cron job when you want to run the jar
4. click on build now and check job is success or not.
5. from here after every commit jenkins will automatically build the application.
6. now we have to integrate Docker with jenkins.
7. goto jenkins plugins and install docker plugin
8. now provide the dockerhub/ECR repo name and credentials to jenkins, so that jenkins will build the image and push to repo.

------------------------------------------------------------------------------------------------
             with Jenkins File (Standard approach follow by IT industry)
1. create a microservice
2. create a docker file
3. create a kubernetes file
4. create a jenkins file
5. commit and push code to version control.
6. now first we have to integrate our version control repo to jenkins
       1. open jenkins and create job.
       2. provide the repository url in configuration
       3. provide the credentials.
       4. provide the cron job when you want to run the jar
7. second we have to tell the jenkins build the maven project, build the docker image, push to dockerhub/ECR, Deploy to K8s.
8. we have to write all these steps in jenkins file.
   EX:
   pipeline {
       agent any
       tools{
           maven 'maven_3_5_0'
       }
       stages{
           stage('Build Maven'){
               steps{
                   checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Java-Techie-jt/devops-automation']]])
                   sh 'mvn clean install'
               }
           }
           stage('Build docker image'){
               steps{
                   script{
                       sh 'docker build -t javatechie/devops-integration .'
                   }
               }
           }
           stage('Push image to Hub'){
               steps{
                   script{
                      withCredentials([string(credentialsId: 'dockerhub-pwd', variable: 'dockerhubpwd')]) {
                      sh 'docker login -u javatechie -p ${dockerhubpwd}'

   }
                      sh 'docker push javatechie/devops-integration'
                   }
               }
           }
           stage('Deploy to k8s'){
               steps{
                   script{
                       kubernetesDeploy (configs: 'deploymentservice.yaml',kubeconfigId: 'k8sconfigpwd')
                   }
               }
           }
       }
   }
9. Provide all the credentials (docker, AWS, ECS, Kubernetes etc..) to Jenkins credentials tab or Aws secret manager.
10. Now goto the jenkins job/pipeline and configure/provide the path to read this file from the project.
11. click on build now. from here whenever will do any changes on code and push to repo, jenkins will automatically
    triggers and perform all the operation mention in the jenkins file.




####################################################################################

        AWS EKS
AWS EKS is a elastic kubernetes service provided by AWS.
Its a fully managed service, only we have to create a cluster and run the docker containers.

##############################################################

        Apache Camel
Apache Camel is an open-source Enterprise integration pattern framework that helps us quickly integrate systems that produce or consume data.
its is a rule based routing engine, which supports domain specific (DSL) language.
its provide the functionality of marshalling and unmarshalling.
Ex: service 1 is providing the output in xml format.
    service 2 is providing the output in json format.
    then how this 2 service will communicate, here Apache camel will work.


##############################################################
*Default time of x-ray traces logs.
 Relative: 6 hrs
 Customs: 30 days

*How networking works?
 If I want to open https://youtube.com then what will happen in background
 DNS->TCP/IP->TLS->DAL
 1. Once I hit a requst DNS will called (Domain name system)
    It works like a address book, all the IP's of the url is saved here.
 2. Once DNS got the IP address, It will call TCP/IP protocol to make a connection
 3. Then TLS will call for the encryption
 4. Data access layer will called
 5. and finally sends response to the client.





	 
	 
	 
	 

				 
